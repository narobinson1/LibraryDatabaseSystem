DROP TABLE RESOURCES;
DROP TABLE VIDEO;
DROP TABLE BOOK;
DROP TABLE CDDVD;
DROP TABLE MEMBER; 
DROP TABLE FINEPAYMENT;
DROP TABLE STUDENT; 
DROP TABLE STAFF; 
DROP TABLE LOAN;
DROP TABLE LOANARCHIVE; 
DROP TABLE RESERVATION;  


CREATE TABLE RESOURCES (  

RESOURCEID NUMBER(7) PRIMARY KEY,  

ISAVAILABLE NUMBER(1) NOT NULL,  

MAXLOANLENGTH NUMBER(2) NOT NULL,  

FLOORNUMBER NUMBER(1) NOT NULL,  

SHELFMARK NUMBER(2) NOT NULL,  

CONSTRAINT ll_isavailable CHECK (ISAVAILABLE IN (0,1)), 

CONSTRAINT ll_domain CHECK (MAXLOANLENGTH IN (0, 2, 14)),  

CONSTRAINT fn_domain CHECK (FLOORNUMBER < 3),  

CONSTRAINT sm_domain CHECK (SHELFMARK < 10) 

); 


CREATE TABLE VIDEO (  

CONTENTID NUMBER(7),  

RESOURCEID NUMBER(7) NOT NULL,  

TITLE VARCHAR2(100) NOT NULL,  

AUTHORNAME VARCHAR(20) NOT NULL,  

PUBLICATIONDATE DATE NOT NULL,  

CONSTRAINT PK_VIDEO PRIMARY KEY(CONTENTID, RESOURCEID), 

CONSTRAINT FK_VIDEO_RESOURCEID FOREIGN KEY(RESOURCEID) REFERENCES RESOURCES 

); 

 

CREATE TABLE BOOK  (   

LCCODE VARCHAR2(10) ,    

RESOURCEID NUMBER(7) NOT NULL,   

TITLE VARCHAR2(100) NOT NULL,   

AUTHORNAME VARCHAR2(20) NOT NULL,   

PUBLICATIONDATE DATE NOT NULL,   

CONSTRAINT PK_BOOK PRIMARY KEY(LCCODE, RESOURCEID),  

CONSTRAINT FK_BOOK_RESOURCEID FOREIGN KEY(RESOURCEID) REFERENCES RESOURCES  

); 

 
CREATE TABLE CDDVD (  

ISBN VARCHAR(13) ,  

RESOURCEID NUMBER(7) NOT NULL,  

TITLE VARCHAR2(100) NOT NULL,  

AUTHORFULLNAME VARCHAR2(50) NOT NULL,  

PUBLICATIONDATE DATE NOT NULL,  

CONSTRAINT PK_CDDVD PRIMARY KEY(ISBN, RESOURCEID), 

CONSTRAINT FK_CDDVD_RESOURCEID FOREIGN KEY(RESOURCEID) REFERENCES RESOURCES  

); 

 

CREATE TABLE MEMBER  (  

LIBRARYCARDID NUMBER(7) PRIMARY KEY,  

OUTSTANDINGDEBT NUMBER(3) NOT NULL); 

 

CREATE TABLE FINEPAYMENT (	 

FINEPAYMENTID NUMBER(10) PRIMARY KEY, 

LIBRARYCARDID NUMBER(7) NOT NULL, 

PAYMENTDATE DATE NOT NULL, 

PAYMENTAMOUNT NUMBER(3) NOT NULL, 

CONSTRAINT FK_FINEPAYMENT_LIBRARYCARDID FOREIGN KEY(LIBRARYCARDID) REFERENCES MEMBER ); 

 

CREATE TABLE STUDENT  (  

STUDENTID NUMBER(7) PRIMARY KEY,    

LIBRARYCARDID NUMBER(7) NOT NULL,   

FULLNAME VARCHAR2(70) NOT NULL,   

EMAIL VARCHAR2(50) NOT NULL UNIQUE,  

PHONENUMBER VARCHAR2(13) NOT NULL UNIQUE,  

CONSTRAINT FK_STUDENT_LIBRARYCARDID FOREIGN KEY(LIBRARYCARDID) REFERENCES MEMBER 

); 

 

CREATE TABLE STAFF (   

STAFFID NUMBER(7) PRIMARY KEY,   

LIBRARYCARDID NUMBER(7) NOT NULL,   

FULLNAME VARCHAR2(70) NOT NULL,    

EMAIL VARCHAR2(50) NOT NULL UNIQUE,  

PHONENUMBER VARCHAR(13) NOT NULL UNIQUE,  

CONSTRAINT FK_STAFF_LIBRARYCARDID FOREIGN KEY (LIBRARYCARDID) REFERENCES MEMBER 

); 

 

CREATE TABLE LOAN  (  

LOANID NUMBER(10) PRIMARY KEY,  

LIBRARYCARDID NUMBER(7) NOT NULL,  

RESOURCEID NUMBER(7) NOT NULL,  

LOANDATE DATE NOT NULL,  

CONSTRAINT FK_LIBRARYCARDID_LOAN FOREIGN KEY(LIBRARYCARDID) REFERENCES MEMBER,  

CONSTRAINT FK_RESOURCEID_LOAN FOREIGN KEY(RESOURCEID) REFERENCES RESOURCES  

); 

 

CREATE TABLE LOANARCHIVE  (  

ARCHIVELOANID NUMBER(10) PRIMARY KEY,  

LIBRARYCARDID NUMBER(7) NOT NULL,  

RESOURCEID NUMBER(7) NOT NULL,   

LOANDATE DATE NOT NULL,  

RETURNEDDATE DATE NOT NULL,   

CONSTRAINT FK_LIBRARYCARDID_LOANARCHIVE FOREIGN KEY(LIBRARYCARDID) REFERENCES MEMBER,  

CONSTRAINT FK_RESOURCEID_LOANARCHIVE FOREIGN KEY(RESOURCEID) REFERENCES RESOURCES  

); 



CREATE TABLE RESERVATION  (  

RESERVATIONID NUMBER(10) PRIMARY KEY,  

LIBRARYCARDID NUMBER(7) NOT NULL,  

RESOURCEID NUMBER(7) NOT NULL,  

RESERVATIONDATE DATE NOT NULL,  

RESERVATIONATTEMPTS NUMBER(1) NOT NULL,  

CONSTRAINT FK_LIBRARYCARDID_RESERVATION FOREIGN KEY(LIBRARYCARDID) REFERENCES MEMBER,  

CONSTRAINT FK_RESOURCEID_RESERVATION FOREIGN KEY(RESOURCEID) REFERENCES RESOURCES, 

CONSTRAINT sn_domain CHECK (RESERVATIONATTEMPTS < 4)  

); 


CREATE OR REPLACE TRIGGER register_inavailability_of_resource
   BEFORE INSERT ON LOAN
   FOR EACH ROW
BEGIN
    UPDATE RESOURCES
    SET RESOURCES.ISAVAILABLE = 0 WHERE RESOURCES.RESOURCEID = :NEW.RESOURCEID;
END;
/

 